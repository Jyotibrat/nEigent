{
  "name": "GitHub Individual Workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -336,
        544
      ],
      "id": "afcc15d7-eeb1-48e8-a446-5db945d99300",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"owner\": \"Jyotibrat\",\n  \"repo\": \"For-Testing\",\n  \"branch\": \"main\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -48,
        544
      ],
      "id": "8a4a43b2-eeb8-49b4-9eb6-4b354bfcef79",
      "name": "GitHub Credentials 1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e583b709-0163-4573-ad1d-3be494ec256c",
              "name": "owner",
              "value": "Jyotibrat",
              "type": "string"
            },
            {
              "id": "051f857a-32d2-4d47-b871-6b7be6638893",
              "name": "repo",
              "value": "For-Testing",
              "type": "string"
            },
            {
              "id": "654244f1-32a4-48f3-9a27-1ddfa85110e7",
              "name": "branch",
              "value": "main",
              "type": "string"
            },
            {
              "id": "b0b34a02-41a6-4253-91f8-1b66d2d3b428",
              "name": "path",
              "value": "={{ $json.path }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        608,
        544
      ],
      "id": "fe498ae4-f5e2-401a-af9f-36f2593af332",
      "name": "GitHub Credentials 2"
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{$json.owner}}/{{$json.repo}}/git/trees/{{$json.branch}}?recursive=1\n",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer "
            },
            {
              "name": "Accept",
              "value": "application/vnd.github+json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        176,
        544
      ],
      "id": "47fcac20-6511-498e-9fe3-60b981b5d8df",
      "name": "GitHub API Call 1",
      "credentials": {
        "githubApi": {
          "id": "",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/contents/{{ $json.path }}?ref={{ $json.branch }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer "
            },
            {
              "name": "Accept",
              "value": "application/vnd.github+json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        544
      ],
      "id": "9114af8e-7347-46a8-8862-f5c6eda5ed89",
      "name": "GitHub API Call 2"
    },
    {
      "parameters": {
        "jsCode": "const allow = /\\.(txt|md|js|ts|py|java|go|rb|json|yaml|yml|tf|sh|env|ini|cfg|properties|ipynb)$/i;\nconst maxBytes = 1_000_000;\nconst out = [];\n($json.tree || []).forEach(n => {\n  if (n.type === 'blob' && allow.test(n.path) && (n.size ?? 0) <= maxBytes) {\n    out.push({ json: { owner: $json.owner, repo: $json.repo, branch: $json.branch, path: n.path } });\n  }\n});\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        544
      ],
      "id": "0b30767a-f1c0-4878-b757-177d73dba071",
      "name": "Fetch Files from Github"
    },
    {
      "parameters": {
        "jsCode": "const b64 = $json.content || \"\";\nconst buf = Buffer.from(b64, \"base64\");\nconst text = buf.toString(\"utf8\");\n// Skip clearly binary files\nif (/[\\u0000-\\u0008\\u000B\\u000C\\u000E-\\u001F]/.test(text)) {\n  return [{ json: { path: $json.path, textContent: \"\", skipped: true } }];\n}\nreturn [{ json: { path: $json.path, textContent: text } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        544
      ],
      "id": "6516618b-0a73-4dc6-98cd-ca529a3b3ac9",
      "name": "Sending file for Data Leak Check"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=AIzaSyCppadu4Z_UgZ2ru1aY48nSBZt05_hMOBs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n  {\n    contents: [\n      {\n        role: \"user\",\n        parts: [\n          {\n            text: `Task: Inspect the following file text for leaked API keys/secrets. If any are found, return ONLY a strict JSON array of objects [{\\\"path\\\",\\\"match_type\\\",\\\"match_value\\\",\\\"confidence\\\"}]. If none, return []. Do not include any prose. File path: ${$json.path}. Text:\\n\\n${$json.textContent}`\n          }\n        ]\n      }\n    ],\n    generationConfig: {\n      temperature: 0,\n      maxOutputTokens: 512\n    }\n  }\n}}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        544
      ],
      "id": "e49754af-f115-48d6-a6a9-12bff37ba4e9",
      "name": "Checking of Files",
      "credentials": {
        "googlePalmApi": {
          "id": "",
          "name": "Google Gemini(PaLM) Api account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// If HTTP node returns an array at root, unwrap it\nconst root = Array.isArray($json) ? $json[0] : $json;\n\n// Extract model text\nlet txt = root?.candidates?.[0]?.content?.parts?.[0]?.text ?? \"\";\n\n// Remove Markdown code fences if present (``` or ```json ... ```)\ntxt = txt.replace(/^```(?:json)?\\s*/i, \"\").replace(/```$/i, \"\");\n\n// Now parse JSON safely\nlet arr = [];\ntry {\n  arr = JSON.parse(txt);\n} catch (e) {\n  arr = [];\n}\n\n// Emit items\nreturn arr.map(d => ({ json: d }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1408,
        544
      ],
      "id": "e2699147-a7d9-4e4c-bf97-afe96a7f3d29",
      "name": "Parsing of output from Gemini"
    },
    {
      "parameters": {
        "jsCode": "// items look like: { path, match_type, match_value, confidence }\nconst rows = items.map(i => i.json);\nconst total = rows.length;\n\nconst lines = rows.map((r, i) => {\n  const masked = typeof r.match_value === \"string\" && r.match_value.length > 10\n    ? `${r.match_value.slice(0,4)}••••${r.match_value.slice(-4)}`\n    : String(r.match_value);\n  return `• ${i+1}. ${r.path}: ${r.match_type} = ${masked} (conf=${r.confidence || \"n/a\"})`;\n}).join('\\n');\n\nconst body = `Secrets scan results\\n\\nTotal findings: ${total}\\n\\n${lines}`;\n\nreturn [{ json: { totalFindings: total, body } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1616,
        544
      ],
      "id": "ad27ef8b-ccec-4367-9c68-762386026684",
      "name": "Making of Data Leak Report"
    },
    {
      "parameters": {
        "sendTo": "bjyotibrat@gmail.com",
        "subject": "=GitHub Report on Data Leak (GitHub secrets scan ({{ $json.totalFindings }}))",
        "emailType": "text",
        "message": "={{ $json.body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1824,
        544
      ],
      "id": "a4d0addd-29f1-4f5c-833b-31690a1a60dd",
      "name": "Send the Report using GMail",
      "webhookId": "a0f22071-cfbd-4137-9aaf-ae268dafc488",
      "credentials": {
        "gmailOAuth2": {
          "id": "",
          "name": "Gmail account 3"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "GitHub Credentials 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Credentials 1": {
      "main": [
        [
          {
            "node": "GitHub API Call 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Credentials 2": {
      "main": [
        [
          {
            "node": "GitHub API Call 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub API Call 1": {
      "main": [
        [
          {
            "node": "Fetch Files from Github",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub API Call 2": {
      "main": [
        [
          {
            "node": "Sending file for Data Leak Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Files from Github": {
      "main": [
        [
          {
            "node": "GitHub Credentials 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sending file for Data Leak Check": {
      "main": [
        [
          {
            "node": "Checking of Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking of Files": {
      "main": [
        [
          {
            "node": "Parsing of output from Gemini",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parsing of output from Gemini": {
      "main": [
        [
          {
            "node": "Making of Data Leak Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Making of Data Leak Report": {
      "main": [
        [
          {
            "node": "Send the Report using GMail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e986449a-634d-4e89-bac2-14b835ff846c",
  "meta": {
    "instanceId": "5273cbb886bf63bf8ba29001a0919c8ecdc0a7ec7c25cb633ea456a3d9ae9fe9"
  },
  "id": "VPHJR8j3WK5QvATh",
  "tags": []
}